#!/usr/bin/env python3
"""
Script de inicializa√ß√£o autom√°tica do sistema
Inicia o Open-WA e executa os scrapers
"""

import os
import sys
import time
import subprocess
import signal
from dotenv import load_dotenv

def log(message):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    log("üîç Verificando depend√™ncias...")
    
    # Verifica Node.js
    try:
        result = subprocess.run(['node', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            log(f"‚úÖ Node.js: {result.stdout.strip()}")
        else:
            log("‚ùå Node.js n√£o encontrado")
            return False
    except FileNotFoundError:
        log("‚ùå Node.js n√£o encontrado")
        return False
    
    # Verifica Python
    try:
        result = subprocess.run([sys.executable, '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            log(f"‚úÖ Python: {result.stdout.strip()}")
        else:
            log("‚ùå Python n√£o encontrado")
            return False
    except Exception as e:
        log(f"‚ùå Erro ao verificar Python: {e}")
        return False
    
    # Verifica depend√™ncias npm
    try:
        result = subprocess.run(['npm', 'list', '@open-wa/wa-automate'], capture_output=True, text=True)
        if result.returncode == 0:
            log("‚úÖ @open-wa/wa-automate instalado")
        else:
            log("‚ùå @open-wa/wa-automate n√£o instalado")
            return False
    except Exception as e:
        log(f"‚ùå Erro ao verificar depend√™ncias npm: {e}")
        return False
    
    return True

def start_openwa():
    """Inicia o Open-WA em background"""
    log("üöÄ Iniciando Open-WA...")
    
    try:
        # Inicia o Open-WA em background
        process = subprocess.Popen(
            ['node', 'WhatsApp/start_openwa.js'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Aguarda um pouco para verificar se iniciou
        time.sleep(5)
        
        if process.poll() is None:
            log("‚úÖ Open-WA iniciado com sucesso")
            return process
        else:
            stdout, stderr = process.communicate()
            log(f"‚ùå Erro ao iniciar Open-WA: {stderr}")
            return None
            
    except Exception as e:
        log(f"‚ùå Erro ao iniciar Open-WA: {e}")
        return None

def wait_for_whatsapp_auth():
    """Aguarda autentica√ß√£o do WhatsApp"""
    log("‚è≥ Aguardando autentica√ß√£o do WhatsApp...")
    
    from WhatsApp.wa_enviar_openwa import OpenWAAPI
    
    openwa = OpenWAAPI()
    max_attempts = 60  # 10 minutos
    attempt = 0
    
    while attempt < max_attempts:
        try:
            if openwa.healthcheck():
                log("‚úÖ WhatsApp autenticado!")
                return True
            else:
                log(f"‚è≥ Tentativa {attempt + 1}/{max_attempts} - Aguardando QR Code...")
                time.sleep(10)
                attempt += 1
        except Exception as e:
            log(f"‚ö†Ô∏è Erro no healthcheck: {e}")
            time.sleep(10)
            attempt += 1
    
    log("‚ùå Timeout aguardando autentica√ß√£o")
    return False

def run_scrapers():
    """Executa os scrapers"""
    log("üîÑ Iniciando scrapers...")
    
    scrapers = [
        'scraper_kabum.py',
        'scraper_ml.py', 
        'scraper_amazon.py'
    ]
    
    processes = []
    
    for scraper in scrapers:
        if os.path.exists(scraper):
            log(f"üì¶ Iniciando {scraper}...")
            process = subprocess.Popen(
                [sys.executable, scraper],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            processes.append((scraper, process))
        else:
            log(f"‚ö†Ô∏è {scraper} n√£o encontrado")
    
    return processes

def main():
    """Fun√ß√£o principal"""
    log("üöÄ Iniciando sistema de scrapers...")
    
    # Carrega vari√°veis de ambiente
    load_dotenv()
    
    # Verifica depend√™ncias
    if not check_dependencies():
        log("‚ùå Depend√™ncias n√£o atendidas. Verifique a instala√ß√£o.")
        return False
    
    # Inicia Open-WA
    openwa_process = start_openwa()
    if not openwa_process:
        log("‚ùå Falha ao iniciar Open-WA")
        return False
    
    # Aguarda autentica√ß√£o
    if not wait_for_whatsapp_auth():
        log("‚ùå Falha na autentica√ß√£o do WhatsApp")
        openwa_process.terminate()
        return False
    
    # Executa scrapers
    scraper_processes = run_scrapers()
    
    log("‚úÖ Sistema iniciado com sucesso!")
    log(f"üìä Status:")
    log(f"   - Open-WA: ‚úÖ Rodando (PID: {openwa_process.pid})")
    log(f"   - Scrapers ativos: {len(scraper_processes)}")
    
    # Mant√©m o processo rodando
    try:
        while True:
            time.sleep(60)
            
            # Verifica se Open-WA ainda est√° rodando
            if openwa_process.poll() is not None:
                log("‚ùå Open-WA parou inesperadamente")
                break
            
            # Verifica status dos scrapers
            for name, process in scraper_processes:
                if process.poll() is not None:
                    log(f"‚ö†Ô∏è {name} parou (c√≥digo: {process.returncode})")
            
    except KeyboardInterrupt:
        log("üõë Recebido sinal de parada...")
    
    # Limpeza
    log("üßπ Encerrando processos...")
    
    if openwa_process:
        openwa_process.terminate()
        openwa_process.wait()
        log("‚úÖ Open-WA encerrado")
    
    for name, process in scraper_processes:
        if process.poll() is None:
            process.terminate()
            process.wait()
            log(f"‚úÖ {name} encerrado")
    
    log("üëã Sistema encerrado")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 